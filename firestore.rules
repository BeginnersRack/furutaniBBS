rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
          // request.auth：ユーザーの認証情報
          // request.resource.data：クライアントから送られてくるfield値（更新後）
          // resource.data：ドキュメントに格納されているフィールド値（更新前）
          
          // 親の設定は子に継承はされない。
              // ユーザー情報を使用した取得ルール例    allow get: if isUserAuthenticated(userId);
  
          function isAuthenticated() { // 条件 1
              return request.auth != null && request.auth.token.email_verified == true;
          }
          //function isUserAuthenticated(userId) { // 条件 1 かつ 条件 2
          //    return isAuthenticated() && userId == request.auth.uid;
          //}
         
         
          function isEmail(strData) { // strDataがメールアドレスとして有効かどうか。
              return (strData is string && strData.matches('^[A-Za-z0-9.$+%]{3,}[@]{1}[A-Za-z0-9]{3,}[.]{1}[A-Za-z0-9]{3,}$'));
          }
          //function isListOfEmail(aryData) { // 条件 1
          //    return aryData is list;
          //}
          

    // ----------- スレッド名リストデータのルール ------------------
    function isThreadList(data) {
        return data.keys().hasOnly(['sort','title','threadtype','created','modified','modified_sys','ownername','ownerids','overview','hideflg'])
        && data.sort is number
        && data.sort >= 0 && data.sort < 1000
        && data.title is string && data.title.size() <= 100
        && data.threadtype is string && data.threadtype.size() <= 100
        && data.created is timestamp
        && data.modified is timestamp
        && data.modified_sys is timestamp
        && data.ownername is string
        && data.ownerids is list
        && data.overview is string && data.overview.size() <= 1000
        && data.hideflg is string && data.hideflg.size() <= 100
        ;
    }
    function isThreadListCreatable(newRes) {
        return newRes.id == "_system" || (
              isThreadList(newRes.data) 
        );
    }
    function isThreadListUpdatable(newRes,orgRes) {
        return (newRes.id == "_system"
        ) || ( isThreadList(newRes.data)
            && newRes.data.created == orgRes.data.created
            && ( orgRes.data.ownerids.hasAll([request.auth.token.email]) )
        );
    }
    function isThreadListDeletable(newRes,orgRes) {
        return (
              isThreadList(newRes.data)
           && newRes.data.created == orgRes.data.created
           && ( orgRes.data.ownerids.hasAll([request.auth.token.email]) )
        );
    }
      // ----------- スレッド内容データのルール ------------------
    function isThreadContent(data) {
        return data.keys().hasOnly(['created','modified_sys','modified','sort','details','details_old'])
        && data.created is timestamp
        && data.modified_sys is timestamp
        && data.modified is timestamp
        && data.sort is number
        && data.sort >= 0 && data.sort < 1000
        && data.details is string
        && data.details.size() <= 1000
        // && ([0,1]).hasAll([data.type])
        ;
    }
    function isThreadContentCreatable(newRes,boardid,threadid) {
        let mycondition = (newRes.id == "_system"
        ) || ( isThreadContent(newRes.data)
             && newRes.data.modified_sys == request.time
             && newRes.data.modified == request.time
        );
        return mycondition 
        && get(/databases/$(database)/documents/BulletinBoardList/$(boardid)/threadList/$(threadid)).data.ownerids.hasAll([request.auth.token.email])
        ;
    }
    function isThreadContentUpdatable(newRes,orgRes,boardid,threadid) {
        let mycondition = (newRes.id == "_system"
        ) || ( isThreadContent(newRes.data)
            && newRes.data.modified_sys == request.time
            && newRes.data.modified == request.time
        );
        return mycondition 
        && get(/databases/$(database)/documents/BulletinBoardList/$(boardid)/threadList/$(threadid)).data.ownerids.hasAll([request.auth.token.email])
        ;
    }
      // ----------- スレッド内コメントデータのルール ------------------
    function isThreadComment(data) {
        return data.keys().hasOnly(['sort','ownerids','ownername','created','modified','modified_sys','titlecategory','details','details_old'])
        && data.ownerids is list
        && data.ownername is string
        && data.created is timestamp
        && data.modified is timestamp
        && data.modified_sys is timestamp
        && data.sort is number
        && data.sort >= 0 && data.sort < 1000
        && data.titlecategory is string && data.titlecategory.size() <= 100
        && data.details is string && data.details.size() <= 1000
        && data.details_old is string
    ;}
    function isThreadCommentCreatable(newRes) {
        return newRes.id == "_systemxxx" || (
              isThreadComment(newRes.data)
           && newRes.data.ownerids.hasAll([request.auth.token.email])
           && newRes.data.created == request.time
           && newRes.data.modified == request.time
           && newRes.data.modified_sys == request.time
        );
    }
    function isThreadCommentUpdatable(newRes,orgRes) {
        return orgRes.id == "_systemxxx" || (
              isThreadComment(newRes.data)
           && newRes.data.diff(orgRes.data).affectedKeys().hasOnly(["ownerids","ownername","modified",'modified_sys','titlecategory',"details","details_old"])
           && orgRes.data.ownerids.hasAll([request.auth.token.email])
           && newRes.data.modified_sys == request.time
        );
    }
    // ----------- スレッド内投稿データのルール ------------------
    function isThreadVote(data) {
        return data.keys().hasOnly(['ownerid','ownername','modified_sys','vote','vote_old',"modified",'created'])
        && data.ownerid is string
        && data.ownername is string
        && data.modified_sys is timestamp
        && data.vote is string && data.vote.size() <= 100
        && data.vote_old is string
    ;}
    function isThreadVoteCreatable(newRes) {
           return isThreadVote(newRes.data)
          && newRes.data.ownerid == (request.auth.token.email)
          && newRes.data.modified_sys == request.time
    ;}
    function isThreadVoteUpdatable(newRes,orgRes) {
        return isThreadVote(newRes.data)
        && orgRes.data.ownerid == (request.auth.token.email)
        && newRes.data.ownerid == orgRes.data.ownerid
        && newRes.data.modified_sys == request.time
    ;}
    
    // ========================= 設定本体 ===================================
    match /BulletinBoardList/{boardId}{
                allow read : if true;

        match /threadList/{threadId} {   //  スレッド名リスト
                allow read : if isAuthenticated();
                allow create: if isAuthenticated() && isThreadListCreatable(request.resource);
                allow update: if isAuthenticated() && isThreadListUpdatable(request.resource,resource) ;
                allow delete: if isAuthenticated() && isThreadListDeletable(request.resource,resource) ;

            match /contents/{id} {    //  スレッド内容データ
                allow read : if isAuthenticated();
                allow create: if isAuthenticated() && isThreadContentCreatable(request.resource,boardId,threadId);
                allow update: if isAuthenticated() && isThreadContentUpdatable(request.resource,resource,boardId,threadId) ;
            }
            
            match /discussion/{id} {    //  スレッド内コメントデータ
                allow read : if isAuthenticated();
                allow create: if isAuthenticated() && isThreadCommentCreatable(request.resource);
                allow update: if isAuthenticated() && isThreadCommentUpdatable(request.resource,resource) ;
            }
            
            match /vote/{id} {    //  スレッド投票データ
                allow read : if isAuthenticated();
                allow create: if isAuthenticated() && isThreadVoteCreatable(request.resource);
                allow update: if isAuthenticated() && isThreadVoteUpdatable(request.resource,resource) ;
            }

        }
    }
    match /MeetingRooms/SkyWayKey{
                allow read : if isAuthenticated();
    }
    match /MeetingRooms/{localename}{
        match /MeetingRoomList/{id} {
                allow read : if isAuthenticated();
                allow create: if isAuthenticated();
                allow update: if isAuthenticated();
                allow delete: if isAuthenticated();
        }
        match /MeetingMembers/{id} {
                allow read : if isAuthenticated();
                allow create: if isAuthenticated();
                allow update: if isAuthenticated();
                allow delete: if isAuthenticated();
        }
    }
    // ======================================================================
  }
}